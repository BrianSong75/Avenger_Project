---
- name: install NGINX
  dnf:
    update_cache: true
    name: nginx
    state: latest
    install_weak_deps: true

- name: copy pre-configured nginx.conf to Ultron2&3 Servers
  copy:
    src: nginx.conf.ultron
    dest: /etc/nginx/nginx.conf
    owner: root
    mode: '0644'
    backup: true
  when:
    - ansible_facts ['hostname'] == "Ultron2"
    - ansible_facts ['hostname'] == "Ultron3"

- name: change the IP addresses in the nginx.conf file to each corresponding Ul$
  replace:
    path: /etc/nginx/nginx.conf
    regexp: '192.168.1.116'
    replace: "{{ ansible_facts.default_ipv4.address }}"
  when:
    - ansible_facts['hostname'] == "Ultron2"
    - ansible_facts['hostname'] == "Ultron3"

- name: change the nginx log file names in each Ultron2&3 servers
  replace:
    path: /etc/nginx/nginx.conf
    regexp: "name.access.log"
    replace: "{{ item }}_access.log"
  with_items:
    - dvwa
    - bwapp
    - mutillidae
  when:
    - ansible_facts['hostname'] == "Ultron2"
    - ansible_facts['hostname'] == "Ultron3"

- name: copy pre-configured nginx.conf to Ultron Load Balancer
  copy:
    src: nginx.conf.ultronL
    dest: /etc/nginx/nginx.conf
    owner: root
    mode: '0644'
    backup: true
  when: ansible_facts ['hostname'] == "Ultron"

- name: copy updated hosts file for WinterSoldier
  copy:
    src: hosts.winter
    dest: /etc/hosts
    owner: root
    mode: '0644'
    backup: true
  when:
    - ansible_facts ['hostname'] == "WinterSoldier"

- name: copy updated hosts file for Ultron2&3 servers
  copy:
    src: hosts.ultron
    dest: /etc/hosts
    owner: root
    mode: '0644'
    backup: true
  when:
    - ansible_facts['hostname'] == "Ultron2"
    - ansible_facts['hostname'] == "Ultron3"

- name: copy updated hosts file for Ultron server
  copy:
    src: hosts.ultronL
    dest: /etc/hosts
    owner: root
    mode: '0644'
    backup: true
  when: ansible_facts['hostname'] == "Ultron"

- name: copy pre-configured nginx.conf to Winter Soldier Server
  copy:
    src: nginx.conf.ws
    dest: /etc/nginx/nginx.conf
    owner: root
    mode: '0644'
    backup: true
  when: ansible_facts ['hostname'] == "WinterSoldier"

- name: copy nginx directories & its files for each web applications on Ultron2$
  copy:
    src: /usr/share/nginx/
    dest: /usr/share/{{ item }}
    remote_src: true
    owner: root
  with_items:
    - dvwa
    - bwapp
    - mutillidae
  when:
    - ansible_facts ['hostname'] == "Ultron2"
    - ansible_facts ['hostname'] == "Ultron3"

- name: copy nginx directories & its files for WinterSoldier
  copy:
    src: /usr/share/nginx/
    dest: /usr/share/{{ item }}
    remote_src: true
    owner: root
  with_items:
    - kibana
    - logstash
    - elasticsearch
  when: ansible_facts ['hostname'] == "WinterSoldier"

- name: update index file content for each NGINX servers
  replace:
    path: /usr/share/{{ item }}/html/index.html
    regexp: 'Oracle Linux'
    replace: "{{ ansible_facts.hostname }}"
    backup: true
    owner: root
    mode: '0644'
  with_items:
    - dvwa
    - bwapp
    - mutillidae
  when:
    - ansible_facts['hostname'] == "Ultron2"
    - ansible_facts['hostname'] == "Ultron3"

- name: update index file content for each ELK server
  replace:
    path: /usr/share/{{ item }}/html/index.html
    regexp: "CentOS"
    replace: "{{ item }}"
    backup: true
    owner: root
    mode: '0644'
  with_items:
    - kibana
    - elasticsearch
    - logstash
  when: ansible_facts['hostname'] == "WinterSoldier"

- name: adding http service to firewalld
  firewalld:
    zone: marvel
    service: http
    state: enabled
    permanent: true
  when: ansible_facts ['hostname'] is match("Ultron*")

- name: adding kibana and elasticsearch services to firewalld
  firewalld:
    zone: marvel
    service: "{{ item }}"
    state: enabled
    permanent: true
  with_items:
    - kibana
    - elasticsearch
  when: ansible_facts['hostname'] == "WinterSoldier"

- name: reload firewalld
  command:
    firewall-cmd --reload

- name: update assigned port information to SELinux
  seport:
    ports:
      - "18880"
      - "18800"
      - "18000"
    proto: tcp
    setype: http_port_t
    state: present
    reload: true
  when:
    - ansible_facts['hostname'] == "Ultron2"
    - ansible_facts['hostname'] == "Ultron3"

- name: start nginx service
  service:
    name: nginx
    state: started
    enabled: true
        

...
